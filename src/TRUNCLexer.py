# Generated from TRUNC.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,134,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,5,17,94,8,17,10,17,12,
        17,97,9,17,1,18,4,18,100,8,18,11,18,12,18,101,1,18,1,18,5,18,106,
        8,18,10,18,12,18,109,9,18,3,18,111,8,18,1,19,1,19,1,19,1,19,5,19,
        117,8,19,10,19,12,19,120,9,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,21,1,21,1,22,1,22,1,118,0,23,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,1,0,3,3,0,9,10,13,13,32,32,2,
        0,65,90,97,122,1,0,48,57,139,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,
        47,1,0,0,0,3,50,1,0,0,0,5,52,1,0,0,0,7,54,1,0,0,0,9,57,1,0,0,0,11,
        61,1,0,0,0,13,64,1,0,0,0,15,67,1,0,0,0,17,70,1,0,0,0,19,72,1,0,0,
        0,21,74,1,0,0,0,23,78,1,0,0,0,25,80,1,0,0,0,27,82,1,0,0,0,29,84,
        1,0,0,0,31,86,1,0,0,0,33,88,1,0,0,0,35,90,1,0,0,0,37,99,1,0,0,0,
        39,112,1,0,0,0,41,126,1,0,0,0,43,130,1,0,0,0,45,132,1,0,0,0,47,48,
        5,60,0,0,48,49,5,61,0,0,49,2,1,0,0,0,50,51,5,60,0,0,51,4,1,0,0,0,
        52,53,5,62,0,0,53,6,1,0,0,0,54,55,5,62,0,0,55,56,5,61,0,0,56,8,1,
        0,0,0,57,58,5,97,0,0,58,59,5,110,0,0,59,60,5,100,0,0,60,10,1,0,0,
        0,61,62,5,111,0,0,62,63,5,114,0,0,63,12,1,0,0,0,64,65,5,61,0,0,65,
        66,5,61,0,0,66,14,1,0,0,0,67,68,5,33,0,0,68,69,5,61,0,0,69,16,1,
        0,0,0,70,71,5,91,0,0,71,18,1,0,0,0,72,73,5,93,0,0,73,20,1,0,0,0,
        74,75,5,103,0,0,75,76,5,109,0,0,76,77,5,40,0,0,77,22,1,0,0,0,78,
        79,5,44,0,0,79,24,1,0,0,0,80,81,5,41,0,0,81,26,1,0,0,0,82,83,5,95,
        0,0,83,28,1,0,0,0,84,85,5,43,0,0,85,30,1,0,0,0,86,87,5,45,0,0,87,
        32,1,0,0,0,88,89,5,42,0,0,89,34,1,0,0,0,90,95,3,43,21,0,91,94,3,
        43,21,0,92,94,3,45,22,0,93,91,1,0,0,0,93,92,1,0,0,0,94,97,1,0,0,
        0,95,93,1,0,0,0,95,96,1,0,0,0,96,36,1,0,0,0,97,95,1,0,0,0,98,100,
        3,45,22,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,
        0,0,0,102,110,1,0,0,0,103,107,5,46,0,0,104,106,3,45,22,0,105,104,
        1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,111,
        1,0,0,0,109,107,1,0,0,0,110,103,1,0,0,0,110,111,1,0,0,0,111,38,1,
        0,0,0,112,113,5,47,0,0,113,114,5,42,0,0,114,118,1,0,0,0,115,117,
        9,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,119,1,0,0,0,118,116,
        1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,122,5,42,0,0,122,123,
        5,47,0,0,123,124,1,0,0,0,124,125,6,19,0,0,125,40,1,0,0,0,126,127,
        7,0,0,0,127,128,1,0,0,0,128,129,6,20,0,0,129,42,1,0,0,0,130,131,
        7,1,0,0,131,44,1,0,0,0,132,133,7,2,0,0,133,46,1,0,0,0,7,0,93,95,
        101,107,110,118,1,6,0,0
    ]

class TRUNCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    SUM = 15
    SUB = 16
    MUL = 17
    IDV = 18
    POSNUM = 19
    COMM = 20
    WS = 21
    ALPHA = 22
    DIGIT = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<='", "'<'", "'>'", "'>='", "'and'", "'or'", "'=='", "'!='", 
            "'['", "']'", "'gm('", "','", "')'", "'_'", "'+'", "'-'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "SUM", "SUB", "MUL", "IDV", "POSNUM", "COMM", "WS", "ALPHA", 
            "DIGIT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "SUM", "SUB", "MUL", "IDV", "POSNUM", "COMM", "WS", "ALPHA", 
                  "DIGIT" ]

    grammarFileName = "TRUNC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


